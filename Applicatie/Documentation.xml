<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Framework</name>
    </assembly>
    <members>
        <member name="T:Framework.Data.Conversations.DataManager">
            <summary>
            DataManger class.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.DataManager._backupSuffix">
            <summary>
            Back-up suffix.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.DataManager._internalData">
            <summary>
            Internal data representation.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.DataManager._externalData">
            <summary>
            External data representation.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.DataManager._savePath">
            <summary>
            Path to save data.
            </summary>
        </member>
        <member name="M:Framework.Data.Conversations.DataManager.#ctor(System.String,System.Boolean)">
            <summary>
            Default constructor; pass data save path.
            </summary>
            <param name="path">Save path.</param>
            <param name="newDatabase">Creating a new database.</param>
        </member>
        <member name="M:Framework.Data.Conversations.DataManager.TestPath(System.String,System.Boolean,System.Boolean)">
            <summary>
            Test path if valid and throw exceptions accordingly.
            </summary>
            <param name="path">Path to test for existence.</param>
            <param name="testRead">Flag if exists for reading.</param>
            <param name="testWrite">Flag if write perimissions exist.</param>
            <exception cref="T:Framework.Util.InvalidPathException">Invalid path.</exception>
        </member>
        <member name="M:Framework.Data.Conversations.DataManager.ImportData(System.String)">
            <summary>
            Import data from the given path.
            </summary>
            <param name="path">Path to import from.</param>
        </member>
        <member name="M:Framework.Data.Conversations.DataManager.ImportData">
            <summary>
            Import data from the set path.
            </summary>
        </member>
        <member name="M:Framework.Data.Conversations.DataManager.ExportData(System.String)">
            <summary>
            Export data to the given path.
            </summary>
            <param name="path">Path to export to.</param>
        </member>
        <member name="M:Framework.Data.Conversations.DataManager.ExportData">
            <summary>
            Export data to the set path.
            </summary>
        </member>
        <member name="M:Framework.Data.Conversations.DataManager.SaveData">
            <summary>
            Save data to set path.
            </summary>
        </member>
        <member name="M:Framework.Data.Conversations.DataManager.AddReply(Framework.Data.Conversations.InternalReplyData)">
            <summary>
            Add reply by data.
            </summary>
            <param name="data">Reply data.</param>
            <returns>Guid generated for given reply.</returns>
        </member>
        <member name="M:Framework.Data.Conversations.DataManager.RemoveReply(System.Guid)">
            <summary>
            Remove reply by id.
            </summary>
            <param name="id">Id.</param>
        </member>
        <member name="M:Framework.Data.Conversations.DataManager.GetReplyData(System.Guid)">
            <summary>
            Get reply by id.
            </summary>
            <param name="id">Reply's id.</param>
            <returns>Internal reply data if key is valid, null if key is invalid.</returns>
            <exception cref="T:Framework.Util.InvalidReplyIDException">Invalid reply id.</exception>
        </member>
        <member name="M:Framework.Data.Conversations.DataManager.UpdateField(System.Guid,Framework.Util.ReplyField,System.Object)">
            <summary>
            Update reply field.
            </summary>
            <param name="id">Reply's id.</param>
            <param name="field">Reply's field.</param>
            <param name="value">Field's new value.</param>
            <exception cref="T:Framework.Util.InvalidReplyIDException">Invalid reply id.</exception>
            <exception cref="T:Framework.Util.InvalidFieldException">Passed invalid field.</exception>
        </member>
        <member name="M:Framework.Data.Conversations.DataManager.AddLink(System.Guid,Framework.Util.ReplyField,System.Guid)">
            <summary>
            Add link between two ids. Data is added to Reply with ID=id and then its link changed accordingly.
            </summary>
            <param name="id">Reply to which the link is being added to.</param>
            <param name="linkType">The type of the link.</param>
            <param name="link">The link's parameter.</param>
            <exception cref="T:Framework.Util.InvalidReplyIDException">Invalid reply id.</exception>
            <exception cref="T:Framework.Util.InvalidFieldException">Passed invalid field.</exception>
            <example>Passing (id1, child, id2) means that id2 is id1's child and id1 is id2's parent.</example>
        </member>
        <member name="M:Framework.Data.Conversations.DataManager.RemoveLink(System.Guid,Framework.Util.ReplyField,System.Guid)">
            <summary>
            Remove link between two ids.
            </summary>
            <param name="id">Reply from which the link is being removed from.</param>
            <param name="linkType">The type of the link.</param>
            <param name="link">The link's parameter.</param>
            <exception cref="T:Framework.Util.InvalidReplyIDException">Invalid reply id.</exception>
            <exception cref="T:Framework.Util.InvalidFieldException">Passed invalid field.</exception>
            <example>Remove linkType (parent/child) with ID=link from ID=id reply.</example>
        </member>
        <member name="M:Framework.Data.Conversations.DataManager.GetParents(System.Guid)">
            <summary>
            Get parents by reply id.
            </summary>
            <param name="id">Reply's id.</param>
            <exception cref="T:Framework.Util.InvalidReplyIDException">Invalid reply id.</exception>
            <returns>List of parents. Throws exceptions accordingly.</returns>
        </member>
        <member name="M:Framework.Data.Conversations.DataManager.GetChildren(System.Guid)">
            <summary>
            Get children by reply id.
            </summary>
            <param name="id">Reply's id.</param>
            <exception cref="T:Framework.Util.InvalidReplyIDException">Invalid reply id.</exception>
            <returns>List of children. Throws exceptions accordingly.</returns>
        </member>
        <member name="M:Framework.Data.Conversations.DataManager.GetField(System.Guid,Framework.Util.ReplyField)">
            <summary>
            Get field by reply id and field name.
            </summary>
            <param name="id">Reply's id.</param>
            <param name="field">Reply's field enumeration.</param>
            <exception cref="T:Framework.Util.InvalidReplyIDException">Invalid reply id.</exception>
            <exception cref="T:Framework.Util.InvalidFieldException">Passed invalid field.</exception>
            <returns>Field data. Throws exceptions accordingly.</returns>
        </member>
        <member name="M:Framework.Data.Conversations.DataManager.GetCount(System.Guid,Framework.Util.ReplyField)">
            <summary>
            Get count for reply depending on id and field type.
            </summary>
            <param name="id">Reply id.</param>
            <param name="field">Reply field.</param>
            <exception cref="T:Framework.Util.InvalidReplyIDException">Invalid reply id.</exception>
            <exception cref="T:Framework.Util.InvalidFieldException">Passed invalid field.</exception>
            <returns>Number of items based on field type. Throws exceptions accordingly.</returns>
        </member>
        <member name="M:Framework.Data.Conversations.DataManager.Serialize(Framework.Data.Conversations.ExternalDatabase,System.String,Framework.Util.ExternalFormat)">
            <summary>
            Serialize database by database to the given path.
            </summary>
            <param name="database">External database to serialize.</param>
            <param name="path">Path to serialize the database to.</param>
            <param name="format">Serializing format.</param>
            <exception cref="T:Framework.Util.DataSerializationException">Exception occured on serializing data.</exception>
        </member>
        <member name="M:Framework.Data.Conversations.DataManager.Deserialize(System.String,Framework.Util.ExternalFormat)">
            <summary>
            Deserialize database from given path.
            </summary>
            <param name="path">Path from which to deserialize data.</param>
            <param name="format">Deserializing format.</param>
            <returns>Deserialized data.</returns>
            <exception cref="T:Framework.Util.DataDeserializationException">Exception occured on deserializing data.</exception>
            <exception cref="T:Framework.Util.InvalidPathException">Exception occured on the given path.</exception>
        </member>
        <member name="M:Framework.Data.Conversations.DataManager.PopulateItem(System.Guid)">
            <summary>
            Populate ListViewItem with reply information.
            </summary>
            <param name="id">Reply's ID.</param>
            <exception cref="T:Framework.Util.InvalidReplyIDException">Invalid reply id.</exception>
            <returns>populated ListViewItem.</returns>
        </member>
        <member name="P:Framework.Data.Conversations.DataManager.Replies">
            <summary>
            Get Replies.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.DataManager.UsedIds">
            <summary>
            Get used Ids
            </summary>
        </member>
        <member name="T:Framework.Data.Conversations.ExternalDatabase">
            <summary>
            ExternalConversationDatabase serializable class.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.ExternalDatabase._replies">
            <summary>
            List of replies.
            </summary>
        </member>
        <member name="M:Framework.Data.Conversations.ExternalDatabase.#ctor">
            <summary>
            Default empty ExternalDatabase constructor.
            </summary>
        </member>
        <member name="M:Framework.Data.Conversations.ExternalDatabase.#ctor(Framework.Data.Conversations.InternalDatabase)">
            <summary>
            Default constructor.
            </summary>
            <param name="internalDatabase">Internal representation of data.</param>
        </member>
        <member name="M:Framework.Data.Conversations.ExternalDatabase.ToInternal(Framework.Data.Conversations.ExternalDatabase)">
            <summary>
            Get internal representation of external representation of the database.
            </summary>
            <param name="externalDatabase">External representation of data.</param>
            <returns>Internal representation of data.</returns>
        </member>
        <member name="P:Framework.Data.Conversations.ExternalDatabase.Replies">
            <summary>
            Get list of external replies.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.ExternalDatabase.InternalRepresentation">
            <summary>
            Gets internal representation of the external representation of the database.
            </summary>
        </member>
        <member name="T:Framework.Data.Conversations.ExternalReply">
            <summary>
            ExternalReply serializable class.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.ExternalReply._id">
            <summary>
            Reply's unique identification.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.ExternalReply._data">
            <summary>
            External representation of a reply's data.
            </summary>
        </member>
        <member name="M:Framework.Data.Conversations.ExternalReply.#ctor">
            <summary>
            Default empty constructor.
            </summary>
        </member>
        <member name="M:Framework.Data.Conversations.ExternalReply.#ctor(Framework.Data.Conversations.InternalReply)">
            <summary>
            Default constructor by internal representation of a reply.
            </summary>
            <param name="internalReply">Internal representation of a reply</param>
        </member>
        <member name="M:Framework.Data.Conversations.ExternalReply.ToInternal(Framework.Data.Conversations.ExternalReply)">
            <summary>
            Get internal representation of external representation of the reply data.
            </summary>
            <param name="externalReplyData"></param>
            <returns></returns>
        </member>
        <member name="P:Framework.Data.Conversations.ExternalReply.Id">
            <summary>
            Get reply's ID.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.ExternalReply.Data">
            <summary>
            Get external reply's data.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.ExternalReply.InternalRepresentation">
            <summary>
            Gets internal representation of the external representation of the reply data.
            </summary>
        </member>
        <member name="T:Framework.Data.Conversations.ExternalReplyData">
            <summary>
            ExternalReplyData serializable class.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.ExternalReplyData._timestamp">
            <summary>
            Reply's timestamp.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.ExternalReplyData._author">
            <summary>
            Reply's author.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.ExternalReplyData._text">
            <summary>
            Reply's text.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.ExternalReplyData._children">
            <summary>
            Reply's list of children.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.ExternalReplyData._parents">
            <summary>
            Reply's list of parents.
            </summary>
        </member>
        <member name="M:Framework.Data.Conversations.ExternalReplyData.#ctor">
            <summary>
            Default ExternalReplyData constructor.
            </summary>
        </member>
        <member name="M:Framework.Data.Conversations.ExternalReplyData.#ctor(Framework.Data.Conversations.InternalReplyData)">
            <summary>
            Default constructor by internal representation of reply data.
            </summary>
            <param name="internalReplyData">Internal representation of reply data.</param>
        </member>
        <member name="M:Framework.Data.Conversations.ExternalReplyData.ToInternal(Framework.Data.Conversations.ExternalReplyData)">
            <summary>
            Get internal representation of external representation of the reply data.
            </summary>
            <param name="externalReplyData"></param>
            <returns></returns>
        </member>
        <member name="P:Framework.Data.Conversations.ExternalReplyData.Timestamp">
            <summary>
            Gets reply's time stamp.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.ExternalReplyData.Author">
            <summary>
            Gets reply's author.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.ExternalReplyData.Text">
            <summary>
            Gets reply's text.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.ExternalReplyData.Children">
            <summary>
            Get reply's list of children IDs.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.ExternalReplyData.Parents">
            <summary>
            Get reply's list of parent IDs.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.ExternalReplyData.InternalRepresentation">
            <summary>
            Gets internal representation of the external representation of the reply data.
            </summary>
        </member>
        <member name="T:Framework.Data.Conversations.InternalDatabase">
            <summary>
            InternalDatabase class.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.InternalDatabase._hashedReplies">
            <summary>
            All replies stored as a dictionary.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.InternalDatabase._dataChanged">
            <summary>
            Data changed flag.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.InternalDatabase._byTimestamp">
            <summary>
            Replies sorted according to their timestamps as a list of IDs.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.InternalDatabase._replies">
            <summary>
            All replies stored as a list.
            </summary>
        </member>
        <member name="M:Framework.Data.Conversations.InternalDatabase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Framework.Data.Conversations.InternalDatabase.#ctor(Framework.Data.Conversations.ExternalDatabase)">
            <summary>
            Default constructor by external database.
            </summary>
            <param name="externalDatabase">External representation of database.</param>
        </member>
        <member name="M:Framework.Data.Conversations.InternalDatabase.GenerateGuid">
            <summary>
            Generate new key for adding to dictionary.
            </summary>
            <returns>Generated key.</returns>
        </member>
        <member name="M:Framework.Data.Conversations.InternalDatabase.RebuildSortedLists">
            <summary>
            Rebuild sorted lists.
            </summary>
        </member>
        <member name="M:Framework.Data.Conversations.InternalDatabase.CleanAssociations(System.Guid)">
            <summary>
            Remove all associations of given id.
            </summary>
            <param name="id">Id.</param>
        </member>
        <member name="M:Framework.Data.Conversations.InternalDatabase.GetReply(System.Guid)">
            <summary>
            Get reply by id.
            </summary>
            <param name="id">Id.</param>
            <returns>Internal representation of reply.</returns>
            <exception cref="T:Framework.Util.InvalidReplyIDException">Invalid reply id.</exception>
        </member>
        <member name="M:Framework.Data.Conversations.InternalDatabase.AddReply(Framework.Data.Conversations.InternalReplyData)">
            <summary>
            Add reply by data.
            </summary>
            <param name="data">Reply data.</param>
            <returns>Guid generated for given reply.</returns>
        </member>
        <member name="M:Framework.Data.Conversations.InternalDatabase.RemoveReply(System.Guid)">
            <summary>
            Remove reply by id.
            </summary>
            <param name="id">Id.</param>
        </member>
        <member name="M:Framework.Data.Conversations.InternalDatabase.GetReplyData(System.Guid)">
            <summary>
            Get reply by id.
            </summary>
            <param name="id">Reply's id.</param>
            <returns>Internal reply data if key is valid, null if key is invalid.</returns>
            <exception cref="T:Framework.Util.InvalidReplyIDException">Invalid reply id.</exception>
        </member>
        <member name="M:Framework.Data.Conversations.InternalDatabase.UpdateField(System.Guid,Framework.Util.ReplyField,System.Object)">
            <summary>
            Update reply field.
            </summary>
            <param name="id">Reply's id.</param>
            <param name="field">Reply's field.</param>
            <param name="value">Field's new value.</param>
            <exception cref="T:Framework.Util.InvalidReplyIDException">Invalid reply id.</exception>
            <exception cref="T:Framework.Util.InvalidFieldException">Passed invalid field.</exception>
        </member>
        <member name="M:Framework.Data.Conversations.InternalDatabase.AddLink(System.Guid,Framework.Util.ReplyField,System.Guid)">
            <summary>
            Add link between two ids. Data is added to Reply with ID=id and then its link changed accordingly.
            </summary>
            <param name="id">Reply to which the link is being added to.</param>
            <param name="linkType">The type of the link.</param>
            <param name="link">The link's parameter.</param>
            <exception cref="T:Framework.Util.InvalidReplyIDException">Invalid reply id.</exception>
            <exception cref="T:Framework.Util.InvalidFieldException">Passed invalid field.</exception>
            <example>Passing (id1, child, id2) means that id2 is id1's child and id1 is id2's parent.</example>
        </member>
        <member name="M:Framework.Data.Conversations.InternalDatabase.RemoveLink(System.Guid,Framework.Util.ReplyField,System.Guid)">
            <summary>
            Remove link between two ids.
            </summary>
            <param name="id">Reply from which the link is being removed from.</param>
            <param name="linkType">The type of the link.</param>
            <param name="link">The link's parameter.</param>
            <exception cref="T:Framework.Util.InvalidReplyIDException">Invalid reply id.</exception>
            <exception cref="T:Framework.Util.InvalidFieldException">Passed invalid field.</exception>
            <example>Remove linkType (parent/child) with ID=link from ID=id reply.</example>
        </member>
        <member name="M:Framework.Data.Conversations.InternalDatabase.GetParents(System.Guid)">
            <summary>
            Get parents by reply id.
            </summary>
            <param name="id">Reply's id.</param>
            <exception cref="T:Framework.Util.InvalidReplyIDException">Invalid reply id.</exception>
            <returns>List of parents. Throws exceptions accordingly.</returns>
        </member>
        <member name="M:Framework.Data.Conversations.InternalDatabase.GetChildren(System.Guid)">
            <summary>
            Get children by reply id.
            </summary>
            <param name="id">Reply's id.</param>
            <exception cref="T:Framework.Util.InvalidReplyIDException">Invalid reply id.</exception>
            <returns>List of children. Throws exceptions accordingly.</returns>
        </member>
        <member name="M:Framework.Data.Conversations.InternalDatabase.GetField(System.Guid,Framework.Util.ReplyField)">
            <summary>
            Get field by reply id and field name.
            </summary>
            <param name="id">Reply's id.</param>
            <param name="field">Reply's field enumeration.</param>
            <exception cref="T:Framework.Util.InvalidReplyIDException">Invalid reply id.</exception>
            <exception cref="T:Framework.Util.InvalidFieldException">Passed invalid field.</exception>
            <returns>Field data. Throws exceptions accordingly.</returns>
        </member>
        <member name="M:Framework.Data.Conversations.InternalDatabase.GetCount(System.Guid,Framework.Util.ReplyField)">
            <summary>
            Get count for reply depending on id and field type.
            </summary>
            <param name="id">Reply id.</param>
            <param name="field">Reply field.</param>
            <exception cref="T:Framework.Util.InvalidReplyIDException">Invalid reply id.</exception>
            <exception cref="T:Framework.Util.InvalidFieldException">Passed invalid field.</exception>
            <returns>Number of items based on field type. Throws exceptions accordingly.</returns>
        </member>
        <member name="P:Framework.Data.Conversations.InternalDatabase.RepliesByTimestamp">
            <summary>
            Get list of replies ordered by timestamp.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.InternalDatabase.Replies">
            <summary>
            Get list of replies.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.InternalDatabase.UsedIds">
            <summary>
            
            </summary>
        </member>
        <member name="T:Framework.Data.Conversations.InternalReply">
            <summary>
            InternalReply class.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.InternalReply._id">
            <summary>
            Reply's unique identification.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.InternalReply._data">
            <summary>
            Internal representation of a reply's data.
            </summary>
        </member>
        <member name="M:Framework.Data.Conversations.InternalReply.#ctor(System.Guid,System.DateTime,System.String,System.String)">
            <summary>
            Internal representation of a reply by id, timestamp, author and text.
            </summary>
            <param name="id">Reply's id.</param>
            <param name="timestamp">Reply's timestamp.</param>
            <param name="author">Reply's author.</param>
            <param name="text">Reply's text.</param>
            <exception cref="T:Framework.Util.InvalidReplyTimestampException">Timestamp value is invalid.</exception>
            <exception cref="T:Framework.Util.InvalidReplyAuthorException">Author value is invalid.</exception>
            <exception cref="T:Framework.Util.InvalidReplyTextException">Text value is invalid.</exception>
        </member>
        <member name="M:Framework.Data.Conversations.InternalReply.#ctor(System.Guid,Framework.Data.Conversations.InternalReplyData)">
            <summary>
            Internal representation of a reply by id and reply data.
            </summary>
            <param name="id">Reply's id.</param>
            <param name="data">Reply's data.</param>
        </member>
        <member name="M:Framework.Data.Conversations.InternalReply.AddChild(System.Guid)">
            <summary>
            Add child by id. Duplicates are not allowed.
            </summary>
            <param name="id">Child id.</param>
            <exception cref="T:Framework.Util.DuplicateReplyChildException">Duplicate children are not allowed.</exception>
            <exception cref="T:Framework.Util.ReplyCircularDependencyException">Circular dependencies are not allowed.</exception>
        </member>
        <member name="M:Framework.Data.Conversations.InternalReply.AddParent(System.Guid)">
            <summary>
            Add parent by id. Duplicates are not allowed.
            </summary>
            <param name="id">Parent id.</param>
            <exception cref="T:Framework.Util.DuplicateReplyParentException">Duplicate parents are not allowed.</exception>
            <exception cref="T:Framework.Util.ReplyCircularDependencyException">Circular dependencies are not allowed.</exception>
        </member>
        <member name="M:Framework.Data.Conversations.InternalReply.RemoveChild(System.Guid)">
            <summary>
            Remove child by id.
            </summary>
            <param name="id">Child id.</param>
        </member>
        <member name="M:Framework.Data.Conversations.InternalReply.RemoveParent(System.Guid)">
            <summary>
            Remove parent by id.
            </summary>
            <param name="id">Parent id.</param>
        </member>
        <member name="P:Framework.Data.Conversations.InternalReply.Id">
            <summary>
            Get reply's ID.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.InternalReply.Data">
            <summary>
            Get internal reply's data.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.InternalReply.Timestamp">
            <summary>
            Gets or sets reply's time stamp. Null value is not accepted.
            </summary>
            <exception cref="T:Framework.Util.InvalidReplyTimestampException">Null value is not accepted for reply's timestamp.</exception>
        </member>
        <member name="P:Framework.Data.Conversations.InternalReply.Author">
            <summary>
            Gets or sets reply's author. Null or empty string values are not accepted.
            </summary>
            <exception cref="T:Framework.Util.InvalidReplyAuthorException">Null or empty string("") values are not accepted for reply's author.</exception>
        </member>
        <member name="P:Framework.Data.Conversations.InternalReply.Text">
            <summary>
            Gets or sets reply's text. Null or empty string values are not accepted.
            </summary>
            <exception cref="T:Framework.Util.InvalidReplyTextException">Null or empty string("") values are not accepted for reply's text.</exception>
        </member>
        <member name="P:Framework.Data.Conversations.InternalReply.Children">
            <summary>
            Get reply's list of children IDs.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.InternalReply.Parents">
            <summary>
            Get reply's list of parent IDs.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.InternalReply.ChildCount">
            <summary>
            Get number of children.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.InternalReply.ParentCount">
            <summary>
            Get number of parents.
            </summary>
        </member>
        <member name="T:Framework.Data.Conversations.InternalReplyData">
            <summary>
            InternalReplyData class.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.InternalReplyData._timestamp">
            <summary>
            Reply's timestamp.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.InternalReplyData._author">
            <summary>
            Reply's author.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.InternalReplyData._text">
            <summary>
            Reply's text.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.InternalReplyData._children">
            <summary>
            Reply's list of children.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.InternalReplyData._parents">
            <summary>
            Reply's list of parents.
            </summary>
        </member>
        <member name="M:Framework.Data.Conversations.InternalReplyData.#ctor(System.DateTime,System.String,System.String)">
            <summary>
            Internal representation of a reply's data by timestamp, author and text.
            </summary>
            <param name="timestamp">Reply's timestamp.</param>
            <param name="author">Reply's author.</param>
            <param name="text">Reply's text.</param>
            <exception cref="T:Framework.Util.InvalidReplyTimestampException">Timestamp value is invalid.</exception>
            <exception cref="T:Framework.Util.InvalidReplyAuthorException">Author value is invalid.</exception>
            <exception cref="T:Framework.Util.InvalidReplyTextException">Text value is invalid.</exception>
        </member>
        <member name="M:Framework.Data.Conversations.InternalReplyData.TestValidField(Framework.Util.ReplyField,System.Object)">
            <summary>
            Test valid field and throw exception accordingly.
            </summary>
            <param name="field">Reply field to test.</param>
            <param name="value">Value given to reply field.</param>
            <exception cref="T:Framework.Util.InvalidReplyTimestampException">Timestamp value is invalid.</exception>
            <exception cref="T:Framework.Util.InvalidReplyAuthorException">Author value is invalid.</exception>
            <exception cref="T:Framework.Util.InvalidReplyTextException">Text value is invalid.</exception>
            <exception cref="T:Framework.Util.InvalidFieldException">Given invalid field.</exception>
        </member>
        <member name="M:Framework.Data.Conversations.InternalReplyData.AddChild(System.Guid)">
            <summary>
            Add child by id. Duplicates are not allowed.
            </summary>
            <param name="id">Child id.</param>
            <exception cref="T:Framework.Util.DuplicateReplyChildException">Duplicate children are not allowed.</exception>
            <exception cref="T:Framework.Util.ReplyCircularDependencyException">Circular dependencies are not allowed.</exception>
        </member>
        <member name="M:Framework.Data.Conversations.InternalReplyData.AddParent(System.Guid)">
            <summary>
            Add parent by id. Duplicates are not allowed.
            </summary>
            <param name="id">Parent id.</param>
            <exception cref="T:Framework.Util.DuplicateReplyParentException">Duplicate parents are not allowed.</exception>
            <exception cref="T:Framework.Util.ReplyCircularDependencyException">Circular dependencies are not allowed.</exception>
        </member>
        <member name="M:Framework.Data.Conversations.InternalReplyData.RemoveChild(System.Guid)">
            <summary>
            Remove child by id.
            </summary>
            <param name="id">Child id.</param>
        </member>
        <member name="M:Framework.Data.Conversations.InternalReplyData.RemoveParent(System.Guid)">
            <summary>
            Remove parent by id.
            </summary>
            <param name="id">Parent id.</param>
        </member>
        <member name="P:Framework.Data.Conversations.InternalReplyData.Timestamp">
            <summary>
            Gets or sets reply's time stamp. Null value is not accepted.
            </summary>
            <exception cref="T:Framework.Util.InvalidReplyTimestampException">Null value is not accepted for reply's timestamp.</exception>
        </member>
        <member name="P:Framework.Data.Conversations.InternalReplyData.Author">
            <summary>
            Gets or sets reply's author. Null or empty string values are not accepted.
            </summary>
            <exception cref="T:Framework.Util.InvalidReplyAuthorException">Null or empty string("") values are not accepted for reply's author.</exception>
        </member>
        <member name="P:Framework.Data.Conversations.InternalReplyData.Text">
            <summary>
            Gets or sets reply's text. Null or empty string values are not accepted.
            </summary>
            <exception cref="T:Framework.Util.InvalidReplyTextException">Null or empty string("") values are not accepted for reply's text.</exception>
        </member>
        <member name="P:Framework.Data.Conversations.InternalReplyData.Children">
            <summary>
            Get reply's list of children IDs.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.InternalReplyData.Parents">
            <summary>
            Get reply's list of parent IDs.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.InternalReplyData.ChildCount">
            <summary>
            Get number of children.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.InternalReplyData.ParentCount">
            <summary>
            Get number of parents.
            </summary>
        </member>
        <member name="T:Framework.Data.Conversations.PreferencesData">
            <summary>
            PreferencesData serializable class.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.PreferencesData._defaultLanguage">
            <summary>
            Default language flag.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.PreferencesData._customLanguageLocation">
            <summary>
            Custom language file location path.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.PreferencesData._defaultTheme">
            <summary>
            Default theme flag.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.PreferencesData._customThemeLocation">
            <summary>
            Custom theme file location path.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.PreferencesData._defaultLocation">
            <summary>
            Default location flag.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.PreferencesData._customLocation">
            <summary>
            Custom location path.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.PreferencesData._binaryFormat">
            <summary>
            Binary exporting format flag.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.PreferencesData._xmlFormat">
            <summary>
            XML exporting format flag.
            </summary>
        </member>
        <member name="M:Framework.Data.Conversations.PreferencesData.#ctor">
            <summary>
            Default preferences data.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.PreferencesData.DefaultLanguage">
            <summary>
            Gets or sets default language flag.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.PreferencesData.LanguageLocation">
            <summary>
            Gets or sets custom language location path.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.PreferencesData.DefaultTheme">
            <summary>
            Gets or sets default theme flag.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.PreferencesData.ThemeLocation">
            <summary>
            Gets or sets custom theme location path.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.PreferencesData.DefaultLocation">
            <summary>
            Gets or sets default location flag.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.PreferencesData.SaveLocation">
            <summary>
            Gets or sets custom save location path.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.PreferencesData.BinaryFormat">
            <summary>
            Gets or sets binary format flag.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.PreferencesData.XMLFormat">
            <summary>
            Gets or sets XML format flag.
            </summary>
        </member>
        <member name="T:Framework.Data.Conversations.PreferencesManager">
            <summary>
            PreferencesManager class.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.PreferencesManager.PATH">
            <summary>
            Default location for preferences file.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.PreferencesManager._data">
            <summary>
            Prefereces data.
            </summary>
        </member>
        <member name="F:Framework.Data.Conversations.PreferencesManager._defaultPath">
            <summary>
            Default path location.
            </summary>
        </member>
        <member name="M:Framework.Data.Conversations.PreferencesManager.#ctor">
            <summary>
            Default PreferencesManager constructor.
            </summary>
        </member>
        <member name="M:Framework.Data.Conversations.PreferencesManager.#ctor(System.String)">
            <summary>
            PreferencesManager constructor by path
            </summary>
            <param name="path">Path to save preferences.xml file.</param>
        </member>
        <member name="M:Framework.Data.Conversations.PreferencesManager.LoadPreferences(System.String)">
            <summary>
            Load preferences from path.
            </summary>
            <param name="path">Path to load the preferences from.</param>
            <exception cref="T:Framework.Util.DataDeserializationException">Data could not be deserialized from given path.</exception>
            <returns>PreferencesData</returns>
        </member>
        <member name="M:Framework.Data.Conversations.PreferencesManager.SavePreferences(Framework.Data.Conversations.PreferencesData,System.String)">
            <summary>
            Save preferences to given path.
            </summary>
            <param name="data">PreferencesData to save.</param>
            <param name="path">Location to save the PreferencesData to.</param>
            <exception cref="T:Framework.Util.DataSerializationException">Data could not be serialized to the given path.</exception>
        </member>
        <member name="M:Framework.Data.Conversations.PreferencesManager.GetFormat(System.String)">
            <summary>
            Get format from given path.
            </summary>
            <param name="path">Path.</param>
            <exception cref="T:Framework.Util.InvalidPathException">Given path does not have an extension at the end.</exception>
            <returns>ExternalFormat</returns>
        </member>
        <member name="M:Framework.Data.Conversations.PreferencesManager.GetExtension(Framework.Util.ExternalFormat)">
            <summary>
            Get format as text from given ExternalFormat.
            </summary>
            <param name="format">ExternalFormat.</param>
            <exception cref="T:Framework.Util.InvalidExternalFormatException">ExternalFormat is invalid.</exception>
            <returns>Format as text</returns>
        </member>
        <member name="M:Framework.Data.Conversations.PreferencesManager.Save(System.String)">
            <summary>
            Save preferences to given path.
            </summary>
            <param name="path">Path to save the preferences to.</param>
            <exception cref="T:Framework.Util.DataSerializationException">Data could not be serialized to the given path.</exception>
        </member>
        <member name="M:Framework.Data.Conversations.PreferencesManager.Load(System.String)">
            <summary>
            Load preferences from given path.
            </summary>
            <param name="path">Path to load preferences from.</param>
            <exception cref="T:Framework.Util.DataDeserializationException">Data could not be deserialized from given path.</exception>
        </member>
        <member name="M:Framework.Data.Conversations.PreferencesManager.Save">
            <summary>
            Save preferences to default path.
            </summary>
            <exception cref="T:Framework.Util.DataSerializationException">Data could not be serialized to the given path.</exception>
        </member>
        <member name="M:Framework.Data.Conversations.PreferencesManager.Load">
            <summary>
            Load preferences from default path.
            </summary>
            <exception cref="T:Framework.Util.DataDeserializationException">Data could not be deserialized from given path.</exception>
        </member>
        <member name="P:Framework.Data.Conversations.PreferencesManager.Data">
            <summary>
            Get preferences.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.PreferencesManager.Format">
            <summary>
            Get ExternalFormat.
            </summary>
        </member>
        <member name="P:Framework.Data.Conversations.PreferencesManager.Extension">
            <summary>
            Get extension for current format.
            </summary>
        </member>
        <member name="T:Framework.Data.DataManager">
            <summary>
            Data Manager.
            </summary>
        </member>
        <member name="T:Framework.Data.IDataManager">
            <summary>
            Data Manager interface.
            </summary>
        </member>
        <member name="T:Framework.GUI.Controls.Conversations.BasicInformationControl">
            <summary>
            BasicInformationControl class.
            </summary>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.BasicInformationControl.#ctor">
            <summary>
            Default BasicInformationControl constructor.
            </summary>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.BasicInformationControl.usernameText_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Text changed event handler.
            </summary>
            <param name="sender">Textbox</param>
            <param name="e">Arguments.</param>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.BasicInformationControl.ResetInformation">
            <summary>
            Reset information on control and invalidate information.
            </summary>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.BasicInformationControl.InvalidateInformation">
            <summary>
            Invalidate information by invoking the OnInvalidInformation event.
            </summary>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.BasicInformationControl.ValidateInformation">
            <summary>
            Validate information by invoking the OnValidInformation event.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.BasicInformationControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.BasicInformationControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.BasicInformationControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Framework.GUI.Controls.Conversations.BasicInformationControl.Timestamp">
            <summary>
            Get or set reply's timestamp.
            </summary>
        </member>
        <member name="P:Framework.GUI.Controls.Conversations.BasicInformationControl.Author">
            <summary>
            Get or set reply's author.
            </summary>
        </member>
        <member name="P:Framework.GUI.Controls.Conversations.BasicInformationControl.Reply">
            <summary>
            Get or set reply's text.
            </summary>
        </member>
        <member name="E:Framework.GUI.Controls.Conversations.BasicInformationControl.OnInvalidInformation">
            <summary>
            OnInvalidInformation event.
            </summary>
        </member>
        <member name="E:Framework.GUI.Controls.Conversations.BasicInformationControl.OnValidInformation">
            <summary>
            OnValidInformation event.
            </summary>
        </member>
        <member name="T:Framework.GUI.Controls.Conversations.BasicInformationControl.InvalidInformation">
            <summary>
            Invalid information delegate
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:Framework.GUI.Controls.Conversations.BasicInformationControl.ValidInformation">
            <summary>
            ValidInformation delegate.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:Framework.GUI.Controls.Conversations.ConversationsManagerHost">
            <summary>
            ConversationsManagerHost control class.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.ConversationsManagerHost._viewParents">
            <summary>
            Flag whether or not parents should be viewed.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.ConversationsManagerHost._viewChildren">
            <summary>
            Flag whether or not children should be viewed.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.ConversationsManagerHost._graphView">
            <summary>
            Flag whether or not graph view is activated.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.ConversationsManagerHost._dataManager">
            <summary>
            Conversation Data manager.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.ConversationsManagerHost._refreshNodes">
            <summary>
            Flag whether or not nodes should be refreshed.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.ConversationsManagerHost.normalViewNodeList">
            <summary>
            Normal view node list.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.ConversationsManagerHost.graphViewNodeList">
            <summary>
            Graph view node list.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.ConversationsManagerHost.parentsNodeList">
            <summary>
            Normal view parent list for current node.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.ConversationsManagerHost.childrenNodesList">
            <summary>
            Normal view children list for current node.
            </summary>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.ConversationsManagerHost.#ctor(Framework.Data.Conversations.DataManager,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Default ConversationsManagerHost control constructor.
            </summary>
            <param name="dataManager">Conversations Data Manager.</param>
            <param name="graph">Graph flag value.</param>
            <param name="parents">Parents flag value.</param>
            <param name="children">Children flag value.</param>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.ConversationsManagerHost.NodeList_SelectedItemChanged(Framework.GUI.Controls.Conversations.NodeListControl,System.Boolean,System.Guid)">
            <summary>
            Selected item changed event handler
            </summary>
            <param name="sender">Node list control who's selection has changed.</param>
            <param name="valid">Whether or not the selection is valid.</param>
            <param name="id">Selected item's ID.</param>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.ConversationsManagerHost.NodeList_NodeDataChanged(Framework.GUI.Controls.Conversations.NodeListControl,System.Guid)">
            <summary>
            NodeDataChanged event handler.
            </summary>
            <param name="sender">Node list control</param>
            <param name="id">Id</param>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.ConversationsManagerHost.SetOnSelectedItemChangedEvent(Framework.GUI.Controls.Conversations.NodeListControl,Framework.GUI.Controls.Conversations.ConversationsManagerHost.SelectedItemChanged)">
            <summary>
            Set OnSelectedItemChanged event handler for given Node list control.
            </summary>
            <param name="control">Node list control to set the event handler to.</param>
            <param name="method">Event handler to set to node list control.</param>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.ConversationsManagerHost.SetOnNodeDataChangedEvent(Framework.GUI.Controls.Conversations.NodeListControl,Framework.GUI.Controls.Conversations.ConversationsManagerHost.NodeDataChanged)">
            <summary>
            Set OnNodeDataChanged event handler for given Node list control.
            </summary>
            <param name="control">Node list control to set the event handler to.</param>
            <param name="method">Event handler to set to node list control.</param>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.ConversationsManagerHost.InitializeLists">
            <summary>
            Initialize node lists.
            </summary>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.ConversationsManagerHost.LoadGraphView">
            <summary>
            Load graph view.
            </summary>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.ConversationsManagerHost.LoadNormalView">
            <summary>
            Load normal view.
            </summary>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.ConversationsManagerHost.PopulateChildren(System.Guid)">
            <summary>
            Populate children for given node ID.
            </summary>
            <param name="node">Root node ID.</param>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.ConversationsManagerHost.PopulateParents(System.Guid)">
            <summary>
            Populate parents for given node id.
            </summary>
            <param name="node">Root node ID.</param>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.ConversationsManagerHost.ClearChildren">
            <summary>
            Clear children.
            </summary>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.ConversationsManagerHost.ClearParents">
            <summary>
            Clear parents
            </summary>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.ConversationsManagerHost.ToggleParents">
            <summary>
            Toggle the show parents button and update the host accordingly.
            </summary>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.ConversationsManagerHost.ToggleChildren">
            <summary>
            Toggle the show children button and update the host accordingly.
            </summary>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.ConversationsManagerHost.UpdateContent(System.Boolean)">
            <summary>
            Update content.
            </summary>
            <param name="deleted">Was anything deleted.</param>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.ConversationsManagerHost.UpdateContent(Framework.Util.ReplyField)">
            <summary>
            Update content for given reply field.
            </summary>
            <param name="deletedField">Reply field to update.</param>
            <exception cref="T:Framework.Util.InvalidFieldException">ReplyField is invalid.</exception>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.ConversationsManagerHost.RefreshField(Framework.GUI.Controls.Conversations.NodeListControl,System.Guid)">
            <summary>
            Refresh field in list.
            </summary>
            <param name="list">List where the field should be refreshed.</param>
            <param name="id">Field's ID.</param>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.ConversationsManagerHost.SetContextMenu(Framework.Util.NodeListControlType,System.Windows.Forms.ContextMenuStrip)">
            <summary>
            Set context menu for given node list control.
            </summary>
            <param name="type">Node list control type.</param>
            <param name="menu">Context menu to set.</param>
            <exception cref="T:Framework.Util.InvalidFieldException">Node list control type is invalid.</exception>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.ConversationsManagerHost.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.ConversationsManagerHost.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.ConversationsManagerHost.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Framework.GUI.Controls.Conversations.ConversationsManagerHost.SimpleView">
            <summary>
            Get simple view flag (just nodes, not in graph mode).
            </summary>
        </member>
        <member name="P:Framework.GUI.Controls.Conversations.ConversationsManagerHost.Parents">
            <summary>
            Get or set Parents view flag.
            </summary>
        </member>
        <member name="P:Framework.GUI.Controls.Conversations.ConversationsManagerHost.Children">
            <summary>
            Get or set Children view flag.
            </summary>
        </member>
        <member name="E:Framework.GUI.Controls.Conversations.ConversationsManagerHost.OnSelectedItemChanged">
            <summary>
            OnSelectedItemChanged event.
            </summary>
        </member>
        <member name="T:Framework.GUI.Controls.Conversations.ConversationsManagerHost.SelectedItemChanged">
            <summary>
            SelectedItemChanged delegate.
            </summary>
            <param name="sender">Node list control who's item has been selected.</param>
            <param name="valid">Whether or not the selection is valid.</param>
            <param name="id">Selected id.</param>
        </member>
        <member name="T:Framework.GUI.Controls.Conversations.ConversationsManagerHost.NodeDataChanged">
            <summary>
            NodeDataChanged delegate.
            </summary>
            <param name="sender">Node List control who's data has changed.</param>
            <param name="id">Id.</param>
        </member>
        <member name="T:Framework.GUI.Controls.Conversations.ImportedConversationsControl">
            <summary>
            ImportedConversationControl control class.
            </summary>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.ImportedConversationsControl.#ctor">
            <summary>
            Default ImportedConversationsControl constructor.
            </summary>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.ImportedConversationsControl.addReply_Click(System.Object,System.EventArgs)">
            <summary>
            Add reply click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.ImportedConversationsControl.AddReply">
            <summary>
            Add reply.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.ImportedConversationsControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.ImportedConversationsControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.ImportedConversationsControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Framework.GUI.Controls.Conversations.NodeListControl">
            <summary>
            NodeListControl control class.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.NodeListControl._header">
            <summary>
            Flag whether or not header should be visible.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.NodeListControl._type">
            <summary>
            NodeListControl type.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.NodeListControl._typeAsString">
            <summary>
            String value of NodeListControl type.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.NodeListControl._rootNode">
            <summary>
            Root node Guid.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.NodeListControl._dataManager">
            <summary>
            Conversations Data Manager.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.NodeListControl._nodes">
            <summary>
            List of nodes.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.NodeListControl.toolTip">
            <summary>
            Tool tip.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.NodeListControl._exceptions">
            <summary>
            List of exceptions.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.NodeListControl._viewMode">
            <summary>
            Node view mode.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.NodeListControl._initializingViewNode">
            <summary>
            Flag whether or not view mode is initializing.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.NodeListControl._authorChanged">
            <summary>
            Flag whether or not reply's author was changed.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.NodeListControl._textChanged">
            <summary>
            Flag whether or not reply's text was changed.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.NodeListControl._selectedNode">
            <summary>
            Selected reply's data.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.NodeListControl._selectedId">
            <summary>
            Selected reply's ID.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.NodeListControl._author">
            <summary>
            Selected reply's author.
            </summary>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.NodeListControl._text">
            <summary>
            Selected reply's text.
            </summary>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.NodeListControl.#ctor(Framework.Util.NodeListControlType,Framework.Data.Conversations.DataManager)">
            <summary>
            Default NodeListControl control constructor.
            </summary>
            <param name="type">NodeListControl type.</param>
            <param name="dataManager">Conversations Data Manager.</param>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.NodeListControl.nodeList_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            SelectedIndexChanged event handler.
            </summary>
            <param name="sender">nodeList</param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.NodeListControl.nodeList_OpenedItem(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            OpenedItem event handler.
            </summary>
            <param name="sender">nodeList</param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.NodeListControl.textBox1_TextChanged(System.Object,System.EventArgs)">
            <summary>
            TextChanged event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.NodeListControl.saveChangesButton_Click(System.Object,System.EventArgs)">
            <summary>
            Click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.NodeListControl.hideButton_Click(System.Object,System.EventArgs)">
            <summary>
            Click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.NodeListControl.PopulateListItem(Framework.Data.Conversations.InternalReply)">
            <summary>
            Populate ListViewItem from internal reply.
            </summary>
            <param name="data">Internal Reply</param>
            <returns>ListViewItem</returns>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.NodeListControl.PopulateListItem(System.Guid,Framework.Data.Conversations.InternalReplyData)">
            <summary>
            Populate ListViewItem from internal reply data and given id.
            </summary>
            <param name="id">Internal Reply Data ID.</param>
            <param name="data">Internal Reply Data</param>
            <returns>ListViewItem</returns>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.NodeListControl.InitializeReplies">
            <summary>
            Initialize replies for current root node.
            </summary>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.NodeListControl.InitializeAllReplies">
            <summary>
            Initialize all replies
            </summary>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.NodeListControl.InitializeChildren">
            <summary>
            Initialize children for current root node.
            </summary>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.NodeListControl.InitializeParents">
            <summary>
            Initialize parents for current root node.
            </summary>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.NodeListControl.ClearContent">
            <summary>
            Clear control content.
            </summary>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.NodeListControl.UpdateContent">
            <summary>
            Refresh control content
            </summary>
            <exception cref="T:Framework.Util.InvalidFieldException">NodeListControl type is invalid.</exception>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.NodeListControl.AddItem(System.Windows.Forms.ListViewItem)">
            <summary>
            Add ListViewItem
            </summary>
            <param name="item">ListViewItem to add.</param>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.NodeListControl.RemoveItem(System.Guid)">
            <summary>
            Remove item by id.
            </summary>
            <param name="id">Item id.</param>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.NodeListControl.ViewNode(System.Boolean,System.Guid)">
            <summary>
            View node.
            </summary>
            <param name="show">Whether or not the node should be seen.</param>
            <param name="id">Node's ID.</param>
            <exception cref="T:Framework.Util.InvalidFieldException">View mode is invalid.</exception>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.NodeListControl.ClearCurrentWindow">
            <summary>
            Clear current window's content.
            </summary>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.NodeListControl.ViewInCurrentWindow(System.Guid)">
            <summary>
            View Node in current window
            </summary>
            <param name="id">Node's ID.</param>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.NodeListControl.ViewAsNewWindow(System.Guid)">
            <summary>
            View Node in a new window.
            </summary>
            <param name="id">Node's ID.</param>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.NodeListControl.GetField(System.Int32)">
            <summary>
            Get ReplyField
            </summary>
            <param name="tag">Tag.</param>
            <exception cref="T:Framework.Util.InvalidFieldException">Tag is invalid.</exception>
            <returns>ReplyField</returns>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.NodeListControl.ToggleSaveChangesButton(Framework.Util.ReplyField,System.String)">
            <summary>
            Toggle save changes button.
            </summary>
            <param name="field">Field to test.</param>
            <param name="data">Value.</param>
            <exception cref="T:Framework.Util.InvalidFieldException">Invalid field.</exception>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.NodeListControl.RefreshField(System.Guid)">
            <summary>
            Refresh Node.
            </summary>
            <param name="id">Node id.</param>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.NodeListControl.RefreshField(System.Windows.Forms.ListViewItem)">
            <summary>
            Refresh Node.
            </summary>
            <param name="item">ListViewItem.</param>
        </member>
        <member name="F:Framework.GUI.Controls.Conversations.NodeListControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.NodeListControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Framework.GUI.Controls.Conversations.NodeListControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Framework.GUI.Controls.Conversations.NodeListControl.Header">
            <summary>
            Get or set control's header flag.
            </summary>
        </member>
        <member name="P:Framework.GUI.Controls.Conversations.NodeListControl.Type">
            <summary>
            Get or set NodeListControl type.
            </summary>
        </member>
        <member name="P:Framework.GUI.Controls.Conversations.NodeListControl.TypeAsString">
            <summary>
            Get NodeListControl type as string.
            </summary>
        </member>
        <member name="P:Framework.GUI.Controls.Conversations.NodeListControl.RootNode">
            <summary>
            Get or set root node.
            </summary>
        </member>
        <member name="P:Framework.GUI.Controls.Conversations.NodeListControl.SelectedNode">
            <summary>
            Get selected reply's ID.
            </summary>
        </member>
        <member name="P:Framework.GUI.Controls.Conversations.NodeListControl.Exceptions">
            <summary>
            Set list of exceptions
            </summary>
        </member>
        <member name="P:Framework.GUI.Controls.Conversations.NodeListControl.ViewNodeMode">
            <summary>
            Get or set view mode type.
            </summary>
        </member>
        <member name="E:Framework.GUI.Controls.Conversations.NodeListControl.OnInvalidInformation">
            <summary>
            OnInvalidInformation event.
            </summary>
        </member>
        <member name="E:Framework.GUI.Controls.Conversations.NodeListControl.OnSelectedItemChanged">
            <summary>
            OnSelectedItemChanged event.
            </summary>
        </member>
        <member name="E:Framework.GUI.Controls.Conversations.NodeListControl.OnOpenedItemChanged">
            <summary>
            OnOpenedItemChanged event.
            </summary>
        </member>
        <member name="E:Framework.GUI.Controls.Conversations.NodeListControl.OnNodeDataChanged">
            <summary>
            OnNodeDataChanged event.
            </summary>
        </member>
        <member name="T:Framework.GUI.Controls.Conversations.NodeListControl.InvalidInformation">
            <summary>
            InvalidInformation delegate.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:Framework.GUI.Controls.Conversations.NodeListControl.SelectedItemChanged">
            <summary>
            SelectedItemChanged delegate.
            </summary>
            <param name="sender"></param>
            <param name="valid"></param>
            <param name="id"></param>
        </member>
        <member name="T:Framework.GUI.Controls.Conversations.NodeListControl.OpenedItemChanged">
            <summary>
            OpenedItemChanged delegate,
            </summary>
            <param name="sender"></param>
            <param name="valid"></param>
            <param name="id"></param>
        </member>
        <member name="T:Framework.GUI.Controls.Conversations.NodeListControl.NodeDataChanged">
            <summary>
            NodeDataChanged delegate.
            </summary>
            <param name="sender"></param>
            <param name="id"></param>
        </member>
        <member name="T:Framework.GUI.Forms.Conversations.AddLinkForm">
            <summary>
            Add link form.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.AddLinkForm._dataManager">
            <summary>
            Conversations data manager.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.AddLinkForm._linkType">
            <summary>
            Link type.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.AddLinkForm._link">
            <summary>
            ID to link.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.AddLinkForm._nodeList">
            <summary>
            Node list control.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.AddLinkForm._excludeList">
            <summary>
            IDs to exclude from full list.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.AddLinkForm._newReply">
            <summary>
            Whether or not this is a new reply.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.AddLinkForm._actionType">
            <summary>
            Action type.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddLinkForm.#ctor(Framework.Util.ReplyField,Framework.Data.Conversations.DataManager,System.Guid)">
            <summary>
            Default AddLinkForm constructor.
            </summary>
            <param name="linkType">Type of link.</param>
            <param name="dataManager">Conversations data manager.</param>
            <param name="link">Id to link.</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddLinkForm.#ctor(Framework.Util.ReplyField,Framework.Data.Conversations.DataManager,System.Collections.Generic.List{System.Guid})">
            <summary>
            AddLinkForm constructor by providing exclude list.
            </summary>
            <param name="linkType">Type of link</param>
            <param name="dataManager">Conversations data manager.</param>
            <param name="excludeList">List of IDs to be excluded from full list.</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddLinkForm.NodeList_OnSelectedItemChanged(Framework.GUI.Controls.Conversations.NodeListControl,System.Boolean,System.Guid)">
            <summary>
            Node list on selected item changed event handler.
            </summary>
            <param name="sender">Node list control.</param>
            <param name="valid">Whether or not selected item is valid.</param>
            <param name="id">Selected item's ID.</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddLinkForm.NodeList_OnOpenedItemChanged(Framework.GUI.Controls.Conversations.NodeListControl,System.Boolean,System.Guid)">
            <summary>
            Node list on opened item changed event handler.
            </summary>
            <param name="sender">Node list control.</param>
            <param name="valid">Whether or not opened item is valid.</param>
            <param name="id">Opened item's ID.</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddLinkForm.cancelButton_Click(System.Object,System.EventArgs)">
            <summary>
            Cancel button click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddLinkForm.okButton_Click(System.Object,System.EventArgs)">
            <summary>
            OK button click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddLinkForm.ValidateLinkType(Framework.Util.ReplyField)">
            <summary>
            Validate link type.
            </summary>
            <param name="linkType">Link type.</param>
            <exception cref="T:Framework.Util.InvalidFieldException">Link type is invalid.</exception>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddLinkForm.GetTextValue(Framework.Util.ReplyField)">
            <summary>
            Get text value according to reply field.
            </summary>
            <param name="type">Reply field type.</param>
            <exception cref="T:Framework.Util.InvalidFieldException">Reply field type is invalid.</exception>
            <returns>Text according to reply field type.</returns>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddLinkForm.UpdateDatabase">
            <summary>
            Update database.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.AddLinkForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddLinkForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddLinkForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Framework.GUI.Forms.Conversations.AddLinkForm.SelectedNode">
            <summary>
            Get selected node's ID.
            </summary>
        </member>
        <member name="T:Framework.GUI.Forms.Conversations.AddReplyForm">
            <summary>
            Add reply form.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.AddReplyForm._dataManager">
            <summary>
            Conversations data manager.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.AddReplyForm._initializing">
            <summary>
            Flag whether or not the form is initializing.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.AddReplyForm._children">
            <summary>
            List of children.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.AddReplyForm._parents">
            <summary>
            List of parents.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.AddReplyForm._id">
            <summary>
            Reply's ID.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.AddReplyForm._replyData">
            <summary>
            Reply's data.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.AddReplyForm._type">
            <summary>
            Add reply type.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.AddReplyForm.basicInformation">
            <summary>
            Basic information control.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.AddReplyForm.childrenList">
            <summary>
            Children node list control.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.AddReplyForm.parentList">
            <summary>
            Parents node list control.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.AddReplyForm._selectedLinkId">
            <summary>
            Selected link ID,
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.AddReplyForm._selectedLinkType">
            <summary>
            Selected link type.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddReplyForm.#ctor(Framework.Data.Conversations.DataManager)">
            <summary>
            Default AddReplyForm constructor.
            </summary>
            <param name="dataManager">Conversations data manager.</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddReplyForm.userDataRadioButton_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Radio button checked changed event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddReplyForm.replyDataMode_Changed(System.Object,System.EventArgs)">
            <summary>
            Reply data mode changed event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddReplyForm.browseXmlButton_Click(System.Object,System.EventArgs)">
            <summary>
            Browse xml button click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddReplyForm.doneButton_Click(System.Object,System.EventArgs)">
            <summary>
            Done button click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddReplyForm.cancelButton_Click(System.Object,System.EventArgs)">
            <summary>
            Cancel button click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddReplyForm.basicInformation_OnInvalidInformation(Framework.GUI.Controls.Conversations.BasicInformationControl)">
            <summary>
            Basic information on invalid information event handler.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddReplyForm.basicInformation_OnValidInformation(Framework.GUI.Controls.Conversations.BasicInformationControl)">
            <summary>
            Basic information on valid information event handler.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddReplyForm.NodeList_OnSelectedItemChanged(Framework.GUI.Controls.Conversations.NodeListControl,System.Boolean,System.Guid)">
            <summary>
            Node list on selected item changed event handler.
            </summary>
            <param name="sender"></param>
            <param name="valid"></param>
            <param name="id"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddReplyForm.addReplyButton_Click(System.Object,System.EventArgs)">
            <summary>
            Add reply button click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddReplyForm.removeReplyButton_Click(System.Object,System.EventArgs)">
            <summary>
            Remove reply button click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddReplyForm.AddingReplyFromXML">
            <summary>
            Add reply from XML.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddReplyForm.AddingReplyFromUser">
            <summary>
            Add reply from user.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddReplyForm.UpdateDatabase">
            <summary>
            Update database.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddReplyForm.InitializeControls">
            <summary>
            Initialize controls.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.AddReplyForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddReplyForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.AddReplyForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Framework.GUI.Forms.Conversations.AddReplyForm.Timestamp">
            <summary>
            Gets or sets reply's Timestamp.
            </summary>
        </member>
        <member name="P:Framework.GUI.Forms.Conversations.AddReplyForm.Author">
            <summary>
            Gets or sets reply's Author.
            </summary>
        </member>
        <member name="P:Framework.GUI.Forms.Conversations.AddReplyForm.Reply">
            <summary>
            Gets or sets reply's text.
            </summary>
        </member>
        <member name="P:Framework.GUI.Forms.Conversations.AddReplyForm.Children">
            <summary>
            Gets reply's children.
            </summary>
        </member>
        <member name="P:Framework.GUI.Forms.Conversations.AddReplyForm.Parents">
            <summary>
            Gets reply's parents.
            </summary>
        </member>
        <member name="P:Framework.GUI.Forms.Conversations.AddReplyForm.Id">
            <summary>
            Gets reply's ID.
            </summary>
        </member>
        <member name="P:Framework.GUI.Forms.Conversations.AddReplyForm.ReplyData">
            <summary>
            Gets reply's data.
            </summary>
        </member>
        <member name="P:Framework.GUI.Forms.Conversations.AddReplyForm.AddType">
            <summary>
            Gets add reply type.
            </summary>
        </member>
        <member name="T:Framework.GUI.Forms.Conversations.ImportForm">
            <summary>
            Import form.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.ImportForm._conversations">
            <summary>
            Conversations control.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ImportForm.#ctor">
            <summary>
            Default import constructor.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ImportForm.#ctor(System.String)">
            <summary>
            Import from file.
            </summary>
            <param name="path">File path.</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ImportForm.LoadControl(Framework.Util.ImportControlEnum)">
            <summary>
            Load control by import control enumeration.
            </summary>
            <param name="control">Import control enumeration.</param>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.ImportForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ImportForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ImportForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Framework.GUI.Forms.Conversations.ImportForm.Conversations">
            <summary>
            Get conversations control.
            </summary>
        </member>
        <member name="T:Framework.GUI.Forms.Conversations.ConversationsManager">
            <summary>
            Conversations Manager main form.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.ConversationsManager._dataManager">
            <summary>
            Data manager.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.ConversationsManager._databasesPath">
            <summary>
            Default path for 
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.ConversationsManager._databaseName">
            <summary>
            Current database name (set by New or Open; used on Save).
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.ConversationsManager._state">
            <summary>
            Current state (set by New or Open; used on Save).
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.ConversationsManager._preferencesManager">
            <summary>
            Preferences data manager.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.ConversationsManager._saveLocationBeforePreferences">
            <summary>
            Preferences save location.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.ConversationsManager._host">
            <summary>
            Conversations Manager host.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.ConversationsManager._addType">
            <summary>
            Add type.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.ConversationsManager._selectedId">
            <summary>
            Selected ID.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.ConversationsManager._selectedNode">
            <summary>
            Selected node.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.ConversationsManager._selectedType">
            <summary>
            Selected list control type.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.#ctor">
            <summary>
            Default ConversationsManager constructor.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.newMainMenu_Click(System.Object,System.EventArgs)">
            <summary>
            New click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.openMainMenu_Click(System.Object,System.EventArgs)">
            <summary>
            Open click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.saveMainMenu_Click(System.Object,System.EventArgs)">
            <summary>
            Save click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.saveAsMainMenu_Click(System.Object,System.EventArgs)">
            <summary>
            Save as click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.exitMainMenu_Click(System.Object,System.EventArgs)">
            <summary>
            Exit click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.preferencesMainMenu_Click(System.Object,System.EventArgs)">
            <summary>
            Preferences click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.aboutMainMenu_Click(System.Object,System.EventArgs)">
            <summary>
            About click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.tutorialMainMenu_Click(System.Object,System.EventArgs)">
            <summary>
            Tutorial click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.addButton_Click(System.Object,System.EventArgs)">
            <summary>
            Add button click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.removeReplyButton_Click(System.Object,System.EventArgs)">
            <summary>
            Remove reply button click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.showParentsButton_Click(System.Object,System.EventArgs)">
            <summary>
            Show parents button click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.showChildrenButton_Click(System.Object,System.EventArgs)">
            <summary>
            Show children button click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.ConversationsHost_OnSelectedItemChanged(Framework.GUI.Controls.Conversations.NodeListControl,System.Boolean,System.Guid)">
            <summary>
            Conversations host on selected item changed event handler.
            </summary>
            <param name="sender"></param>
            <param name="valid"></param>
            <param name="id"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.childrenParentsContextMenu_Opening(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Children and parents context menu opening event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.New">
            <summary>
            Create new conversations database.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.Open">
            <summary>
            Open existing conversations database.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.Save">
            <summary>
            Save current conversations database.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.SaveAs">
            <summary>
            Save current conversations database as a different database.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.Exit">
            <summary>
            Exit current application
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.Preferences">
            <summary>
            Show application preferences.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.About">
            <summary>
            Show about window.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.Tutorial">
            <summary>
            Show tutorial window.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.InitializeDatabase(System.Boolean)">
            <summary>
            Initialize database.
            </summary>
            <param name="newDatabase">Flag whether or not it is a new database.</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.InitializeData">
            <summary>
            Intialize data.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.PreferencesChanged">
            <summary>
            Preferences changed.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.MoveData(System.String,System.String)">
            <summary>
            Move files from a location to another.
            </summary>
            <param name="from">Location from where the files should be moved.</param>
            <param name="to">Location where the files should be moved to.</param>
            <exception cref="T:Framework.Util.InvalidPathException">At least on of the locations is invalid.</exception>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.AddReply">
            <summary>
            Add reply.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.AddChild">
            <summary>
            Add child.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.AddParent">
            <summary>
            Add parent.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.UpdateContent(Framework.Util.ReplyField)">
            <summary>
            Update content.
            </summary>
            <param name="deletedNode">Field that needs updated</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.UpdateContent(System.Boolean)">
            <summary>
            Update content.
            </summary>
            <param name="deleted">Whether or not something was deleted.</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.SelectedNode(System.Boolean)">
            <summary>
            Select node.
            </summary>
            <param name="valid">Mark as valid selection.</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.SelectedChild(System.Boolean)">
            <summary>
            Select child.
            </summary>
            <param name="valid">Mark as valid.</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.SelectedParent(System.Boolean)">
            <summary>
            Select parent.
            </summary>
            <param name="valid">Mark as valid.</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.RemoveReply">
            <summary>
            Remove selected reply.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.RemoveChild">
            <summary>
            Remove selected child.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.RemoveParent">
            <summary>
            Remove selected parent.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.ConversationsManager.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ConversationsManager.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Framework.GUI.Forms.Conversations.ConversationsManager.DatabaseName">
            <summary>
            Gets or sets database name (usually by SavedDataManager).
            </summary>
            <exception cref="T:Framework.Util.InvalidPathException">Database name is invalid.</exception>
        </member>
        <member name="P:Framework.GUI.Forms.Conversations.ConversationsManager.DatabaseState">
            <summary>
            Gets or sets main form state (by SavedDataManager).
            </summary>
        </member>
        <member name="P:Framework.GUI.Forms.Conversations.ConversationsManager.Parents">
            <summary>
            Gets or sets parents flag.
            </summary>
        </member>
        <member name="P:Framework.GUI.Forms.Conversations.ConversationsManager.Children">
            <summary>
            Gets or sets children flag.
            </summary>
        </member>
        <member name="T:Framework.GUI.Forms.Conversations.PreferencesForm">
            <summary>
            Preferences form.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.PreferencesForm._manager">
            <summary>
            Preferences data manager.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.PreferencesForm._initializing">
            <summary>
            Initializing flag.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.PreferencesForm._defaultLanguage">
            <summary>
            Flag whether or not the language is set to its default value.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.PreferencesForm._defaultTheme">
            <summary>
            Flag whether or not the theme is set to its default value.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.PreferencesForm._defaultLocation">
            <summary>
            Flag whether or not the default database location is set to its default value.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.PreferencesForm._customLanguagePath">
            <summary>
            Custom location for language.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.PreferencesForm._customThemePath">
            <summary>
            Custom location for theme.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.PreferencesForm.#ctor(Framework.Data.Conversations.PreferencesManager)">
            <summary>
            Default PreferencesForm constructor.
            </summary>
            <param name="manager">Preferences data manager.</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.PreferencesForm.customCheckboxes_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Radio buttons checked changed event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.PreferencesForm.browseLocationButton_Click(System.Object,System.EventArgs)">
            <summary>
            Browse location buttons click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.PreferencesForm.changeDefaultLocationButton_Click(System.Object,System.EventArgs)">
            <summary>
            Change default location button click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.PreferencesForm.applyButton_Click(System.Object,System.EventArgs)">
            <summary>
            Apply button click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.PreferencesForm.InitializeData">
            <summary>
            Initialize data.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.PreferencesForm.InitializeLanguage">
            <summary>
            Initialize language.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.PreferencesForm.InitializeTheme">
            <summary>
            Initialize theme.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.PreferencesForm.InitializeFormat">
            <summary>
            Intialize format.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.PreferencesForm.InitializeSavingLocation">
            <summary>
            Initialize saving location.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.PreferencesForm.ProcessPath(System.String)">
            <summary>
            Process path for display.
            </summary>
            <param name="path">Path to process.</param>
            <returns>processed path</returns>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.PreferencesForm.UpdateApplyButton">
            <summary>
            Update apply button.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.PreferencesForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.PreferencesForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.PreferencesForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Framework.GUI.Forms.Conversations.SaveAsForm">
            <summary>
            Save as form.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.SaveAsForm._parent">
            <summary>
            Link to main form.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.SaveAsForm._databasePath">
            <summary>
            Path to databases.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.SaveAsForm._externalFormat">
            <summary>
            Database external format.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SaveAsForm.#ctor(System.String,Framework.GUI.Forms.Conversations.ConversationsManager,Framework.Util.ExternalFormat)">
            <summary>
            Default SaveAsForm constructor.
            </summary>
            <param name="databasePath">Location for database.</param>
            <param name="parent">ConversationsManager form.</param>
            <param name="format">Format to save the database to.</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SaveAsForm.databaseName_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Database name text changed event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SaveAsForm.cancelButton_Click(System.Object,System.EventArgs)">
            <summary>
            Cancel button click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SaveAsForm.saveButton_Click(System.Object,System.EventArgs)">
            <summary>
            Save button click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SaveAsForm.ValidDatabase(System.String)">
            <summary>
            Check whether or not the current database name is valid.
            </summary>
            <param name="name">Database name.</param>
            <returns>whether or not the given database name is valid</returns>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.SaveAsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SaveAsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SaveAsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Framework.GUI.Forms.Conversations.SavedDataManagerForm">
            <summary>
            Saved Data Manager Form.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.SavedDataManagerForm._state">
            <summary>
            Saved data manager state.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.SavedDataManagerForm._savedDataPath">
            <summary>
            Saved data manager path for loading and creating database files.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.SavedDataManagerForm._parent">
            <summary>
            Link to MainForm parent.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.SavedDataManagerForm._renaming">
            <summary>
            Renaming flag.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.SavedDataManagerForm._newDatabaseFormat">
            <summary>
            Format for new database.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.#ctor(Framework.Util.SavedDataManagerState,System.String,Framework.GUI.Forms.Conversations.ConversationsManager,Framework.Util.ExternalFormat)">
            <summary>
            Default constructor by initial state and default path.
            </summary>
            <param name="state">SavedDataManager initial state.</param>
            <param name="path">SavedDataManager path for new and existing databases.</param>
            <param name="parent">Link to main form.</param>
            <param name="format">New database format.</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.SavedDataManager_StateChanged(System.Object,System.EventArgs)">
            <summary>
            State changed event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.databaseName_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Database name text changed event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.savedDataList_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Saved data list selected index changed event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.renameButton_Click(System.Object,System.EventArgs)">
            <summary>
            Rename button click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.newName_TextChanged(System.Object,System.EventArgs)">
            <summary>
            New name text changed event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.finishRenamingButton_Click(System.Object,System.EventArgs)">
            <summary>
            Finish renaming button click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.deleteButton_Click(System.Object,System.EventArgs)">
            <summary>
            Delete button click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.cancelButton_Click(System.Object,System.EventArgs)">
            <summary>
            Cancel button click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.doneButton_Click(System.Object,System.EventArgs)">
            <summary>
            Done button click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.savedDataList_MouseDoubleClick(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Saved data list double click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.InitializeData">
            <summary>
            Initialize data.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.UpdateState(Framework.Util.SavedDataManagerState,System.Boolean)">
            <summary>
            Update form state.
            </summary>
            <param name="state">Form's new state.</param>
            <param name="checkRadioButtons">Whether or not radio buttons should be updated as well.</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.UpdateState(System.Int32,System.Boolean)">
            <summary>
            Update form state.
            </summary>
            <param name="state">Form's new state as an integer.</param>
            <param name="checkRadioButtons">Whether or not radio buttons should be updated as well.</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.GetState(System.Int32)">
            <summary>
            Convert form state from integer.
            </summary>
            <param name="state">Integer representation of form state.</param>
            <exception cref="T:Framework.Util.InvalidStateException">State is invalid.</exception>
            <returns>SavedDataManagerState</returns>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.PopulateFromFiles(System.String[],Framework.Util.ExternalFormat)">
            <summary>
            Populate database list from files and format.
            </summary>
            <param name="files">Files containing databases to import.</param>
            <param name="format">Format in which the databases will be imported.</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.PopulateDatabases(System.String)">
            <summary>
            Populate list of legitimate databases found at given path.
            </summary>
            <param name="path">Databases path.</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.GetFilenameFromPath(System.String,System.String,System.Boolean)">
            <summary>
            Extract filename from path.
            </summary>
            <param name="path">Path from which to extract filename.</param>
            <param name="extension">Extension to eliminate from path (example: ".dat").</param>
            <param name="includeExtension">Flag whether to include or not the file's extension.</param>
            <returns>Filename or "" whether the given path is correct.</returns>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.GetFileSizeFromPath(System.String,System.Boolean)">
            <summary>
            Extract file size from path with additional formating if requested.
            </summary>
            <param name="path">Path from which to extract file size.</param>
            <param name="formatSize">Flag if size formating is performed.</param>
            <returns></returns>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.FormatSize(System.Int64)">
            <summary>
            Format size from given size value (in bytes).
            </summary>
            <param name="size">Size value in bytes.</param>
            <returns>Formated size of "" if not valid.</returns>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.ValidNewDatabase(System.String)">
            <summary>
            Check if given database name is valid.
            </summary>
            <param name="name">Database name to validate.</param>
            <returns>true if database name is valid, false if not.</returns>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.ValidExistingDatabase(System.String)">
            <summary>
            Check whether or not the given path leads to a file.
            </summary>
            <param name="path">Path to check if valid.</param>
            <returns>Whether or not the path leads to a file.</returns>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.DeleteSelectedDatabase">
            <summary>
            Delete selected database.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.StartRenaming">
            <summary>
            Start renaming database.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.FinishRenaming">
            <summary>
            Finish renaming database.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.UpdateSelectedItem(System.String,System.String)">
            <summary>
            Update selected item
            </summary>
            <param name="name">New name.</param>
            <param name="path">New location.</param>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.SavedDataManagerForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.SavedDataManagerForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Framework.GUI.Forms.Conversations.SavedDataManagerForm.State">
            <summary>
            Get form state
            </summary>
        </member>
        <member name="T:Framework.GUI.Forms.Conversations.ViewReplyForm">
            <summary>
            View reply form.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.ViewReplyForm._data">
            <summary>
            Internal representation of the reply's data.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.ViewReplyForm._dataChanged">
            <summary>
            Flag whether or not data has changed.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.ViewReplyForm._authorChanged">
            <summary>
            Flag whether or not author has changed.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.ViewReplyForm._textChanged">
            <summary>
            Flag whether or not text has changed.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.ViewReplyForm._initializing">
            <summary>
            Flag whether or not the form is initializing.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.ViewReplyForm._author">
            <summary>
            Reply's author.
            </summary>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.ViewReplyForm._text">
            <summary>
            Reply's text.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ViewReplyForm.#ctor(Framework.Data.Conversations.InternalReplyData)">
            <summary>
            Default ViewReplyForm constructor.
            </summary>
            <param name="data">Internal representation of the reply's data</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ViewReplyForm.autorOrText_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Author or Text text changed event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ViewReplyForm.saveChangesButton_Click(System.Object,System.EventArgs)">
            <summary>
            Save changes button click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ViewReplyForm.closeButton_Click(System.Object,System.EventArgs)">
            <summary>
            Close button click event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ViewReplyForm.InitializeData">
            <summary>
            Initialize data on the form.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ViewReplyForm.GetField(System.Int32)">
            <summary>
            Get field from tag.
            </summary>
            <param name="tag">Tag</param>
            <exception cref="T:Framework.Util.InvalidFieldException">Tag is invalid.</exception>
            <returns></returns>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ViewReplyForm.ToggleSaveChangesButton(Framework.Util.ReplyField,System.String)">
            <summary>
            Toggle save changes button depending on the field and it's new data.
            </summary>
            <param name="field">Field</param>
            <param name="data">Field's new data.</param>
            <exception cref="T:Framework.Util.InvalidFieldException">Field is invalid.</exception>
        </member>
        <member name="F:Framework.GUI.Forms.Conversations.ViewReplyForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ViewReplyForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Framework.GUI.Forms.Conversations.ViewReplyForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Framework.GUI.Forms.Conversations.ViewReplyForm.DataChanged">
            <summary>
            Get data changed flag.
            </summary>
        </member>
        <member name="P:Framework.GUI.Forms.Conversations.ViewReplyForm.AuthorChanged">
            <summary>
            Get author changed flag.
            </summary>
        </member>
        <member name="P:Framework.GUI.Forms.Conversations.ViewReplyForm.ReplyTextChanged">
            <summary>
            Get text changed flag.
            </summary>
        </member>
        <member name="P:Framework.GUI.Forms.Conversations.ViewReplyForm.Data">
            <summary>
            Get internal representation of the reply's data.
            </summary>
        </member>
        <member name="T:Framework.Util.ActionType">
            <summary>
            ActionType enumeration.
            </summary>
        </member>
        <member name="F:Framework.Util.ActionType.Add">
            <summary>
            Add action.
            </summary>
        </member>
        <member name="F:Framework.Util.ActionType.Open">
            <summary>
            Open action.
            </summary>
        </member>
        <member name="T:Framework.Util.AddReplyType">
            <summary>
            AddReplyType enumeration.
            </summary>
        </member>
        <member name="F:Framework.Util.AddReplyType.FromUser">
            <summary>
            Add a reply manually.
            </summary>
        </member>
        <member name="F:Framework.Util.AddReplyType.ImportedSingleReply">
            <summary>
            Import a reply from a file.
            </summary>
        </member>
        <member name="F:Framework.Util.AddReplyType.ImportedMultipleReplies">
            <summary>
            Import multiple replies from a file.
            </summary>
        </member>
        <member name="T:Framework.Util.AddType">
            <summary>
            AddType enumeration.
            </summary>
        </member>
        <member name="F:Framework.Util.AddType.Reply">
            <summary>
            Add a reply.
            </summary>
        </member>
        <member name="F:Framework.Util.AddType.Child">
            <summary>
            Add a child to current reply.
            </summary>
        </member>
        <member name="F:Framework.Util.AddType.Parent">
            <summary>
            Add a parent to current reply.
            </summary>
        </member>
        <member name="T:Framework.Util.BaseException">
            <summary>
            Base Exception.
            </summary>
        </member>
        <member name="F:Framework.Util.BaseException.UNKNOWN_EXCEPTION">
            <summary>
            Default exception text.
            </summary>
        </member>
        <member name="F:Framework.Util.BaseException._text">
            <summary>
            Exception's text.
            </summary>
        </member>
        <member name="F:Framework.Util.BaseException._severity">
            <summary>
            Exception's severity.
            </summary>
        </member>
        <member name="M:Framework.Util.BaseException.#ctor(System.String,Framework.Util.ExceptionSeverity)">
            <summary>
            BaseException constructor.
            </summary>
            <param name="text">Exception's text. Default value is "Unknown exception."</param>
            <param name="severity">Exception's severity level. Default value is Info.</param>
        </member>
        <member name="P:Framework.Util.BaseException.Text">
            <summary>
            Get exception's text.
            </summary>
        </member>
        <member name="P:Framework.Util.BaseException.Severity">
            <summary>
            Get exception's severity.
            </summary>
        </member>
        <member name="T:Framework.Util.DataDeserializationException">
            <summary>
            DataDeserializationException class.
            </summary>
        </member>
        <member name="F:Framework.Util.DataDeserializationException.EXCEPTION_TEXT">
            <summary>
            DataDeserializationException text.
            </summary>
        </member>
        <member name="F:Framework.Util.DataDeserializationException.EXCEPTION_SEVERITY">
            <summary>
            DataDeserializationException severity.
            </summary>
        </member>
        <member name="M:Framework.Util.DataDeserializationException.#ctor">
            <summary>
            Default DataDeserializationException constructor.
            </summary>
        </member>
        <member name="T:Framework.Util.DataSerializationException">
            <summary>
            DataSerializationException class.
            </summary>
        </member>
        <member name="F:Framework.Util.DataSerializationException.EXCEPTION_TEXT">
            <summary>
            DataSerializationException text.
            </summary>
        </member>
        <member name="F:Framework.Util.DataSerializationException.EXCEPTION_SEVERITY">
            <summary>
            DataSerializationException severity.
            </summary>
        </member>
        <member name="M:Framework.Util.DataSerializationException.#ctor">
            <summary>
            Default DataSerializationException constructor.
            </summary>
        </member>
        <member name="T:Framework.Util.DuplicateReplyChildException">
            <summary>
            DuplicateReplyChildException class.
            </summary>
        </member>
        <member name="F:Framework.Util.DuplicateReplyChildException.EXCEPTION_TEXT">
            <summary>
            DuplicateReplyChildException text.
            </summary>
        </member>
        <member name="F:Framework.Util.DuplicateReplyChildException.EXCEPTION_SEVERITY">
            <summary>
            DuplicateReplyChildException severity.
            </summary>
        </member>
        <member name="M:Framework.Util.DuplicateReplyChildException.#ctor">
            <summary>
            Default DuplicateReplyChildException constructor.
            </summary>
        </member>
        <member name="T:Framework.Util.DuplicateReplyParentException">
            <summary>
            DuplicateReplyParentException class.
            </summary>
        </member>
        <member name="F:Framework.Util.DuplicateReplyParentException.EXCEPTION_TEXT">
            <summary>
            DuplicateReplyParentException text.
            </summary>
        </member>
        <member name="F:Framework.Util.DuplicateReplyParentException.EXCEPTION_SEVERITY">
            <summary>
            DuplicateReplyParentException severity.
            </summary>
        </member>
        <member name="M:Framework.Util.DuplicateReplyParentException.#ctor">
            <summary>
            Default DuplicateReplyParentException constructor.
            </summary>
        </member>
        <member name="T:Framework.Util.ExceptionSeverity">
            <summary>
            Exception severity level.
            </summary>
        </member>
        <member name="F:Framework.Util.ExceptionSeverity.Info">
            <summary>
            Info level: The user should only be informed.
            </summary>
        </member>
        <member name="F:Framework.Util.ExceptionSeverity.Warning">
            <summary>
            Warning level: The user should be warned.
            </summary>
        </member>
        <member name="F:Framework.Util.ExceptionSeverity.Error">
            <summary>
            Error level: The user should probably restart the process.
            </summary>
        </member>
        <member name="F:Framework.Util.ExceptionSeverity.Fatal">
            <summary>
            Fatal level: The application should halt.
            </summary>
        </member>
        <member name="T:Framework.Util.ExternalFormat">
            <summary>
            ExternalFormat enumeration.
            </summary>
        </member>
        <member name="F:Framework.Util.ExternalFormat.BinaryFormat">
            <summary>
            External binary format.
            </summary>
        </member>
        <member name="F:Framework.Util.ExternalFormat.XMLFormat">
            <summary>
            External xml format.
            </summary>
        </member>
        <member name="T:Framework.Util.ImportControlEnum">
            <summary>
            ImportControlEnum enumeration.
            </summary>
        </member>
        <member name="F:Framework.Util.ImportControlEnum.Conversations">
            <summary>
            Import conversations //TODO
            </summary>
        </member>
        <member name="F:Framework.Util.ImportControlEnum.ImportFromFile">
            <summary>
            Import from file.
            </summary>
        </member>
        <member name="F:Framework.Util.ImportControlEnum.AddReply">
            <summary>
            Add a reply manually.
            </summary>
        </member>
        <member name="T:Framework.Util.InvalidExternalFormatException">
            <summary>
            InvalidExternalFormatException class.
            </summary>
        </member>
        <member name="F:Framework.Util.InvalidExternalFormatException.EXCEPTION_TEXT">
            <summary>
            InvalidExternalFormatException text.
            </summary>
        </member>
        <member name="F:Framework.Util.InvalidExternalFormatException.EXCEPTION_SEVERITY">
            <summary>
            InvalidExternalFormatException severity.
            </summary>
        </member>
        <member name="M:Framework.Util.InvalidExternalFormatException.#ctor">
            <summary>
            Default InvalidExternalFormatException constructor.
            </summary>
        </member>
        <member name="T:Framework.Util.InvalidFieldException">
            <summary>
            InvalidFieldException class.
            </summary>
        </member>
        <member name="F:Framework.Util.InvalidFieldException.EXCEPTION_TEXT">
            <summary>
            InvalidFieldException text.
            </summary>
        </member>
        <member name="F:Framework.Util.InvalidFieldException.EXCEPTION_SEVERITY">
            <summary>
            InvalidFieldException severity.
            </summary>
        </member>
        <member name="M:Framework.Util.InvalidFieldException.#ctor">
            <summary>
            Default InvalidFieldException constructor.
            </summary>
        </member>
        <member name="T:Framework.Util.InvalidPathException">
            <summary>
            InvalidPathException class.
            </summary>
        </member>
        <member name="F:Framework.Util.InvalidPathException.EXCEPTION_TEXT">
            <summary>
            InvalidPathException text.
            </summary>
        </member>
        <member name="F:Framework.Util.InvalidPathException.EXCEPTION_SEVERITY">
            <summary>
            InvalidPathException severity.
            </summary>
        </member>
        <member name="M:Framework.Util.InvalidPathException.#ctor">
            <summary>
            Default InvalidPathException constructor.
            </summary>
        </member>
        <member name="T:Framework.Util.InvalidReplyAuthorException">
            <summary>
            InvalidReplyAuthorException class.
            </summary>
        </member>
        <member name="F:Framework.Util.InvalidReplyAuthorException.EXCEPTION_TEXT">
            <summary>
            InvalidReplyAuthorException text.
            </summary>
        </member>
        <member name="F:Framework.Util.InvalidReplyAuthorException.EXCEPTION_SEVERITY">
            <summary>
            InvalidReplyAuthorException severity.
            </summary>
        </member>
        <member name="M:Framework.Util.InvalidReplyAuthorException.#ctor">
            <summary>
            Default InvalidReplyAuthorException constructor.
            </summary>
        </member>
        <member name="T:Framework.Util.InvalidReplyIDException">
            <summary>
            InvalidReplyIDException class.
            </summary>
        </member>
        <member name="F:Framework.Util.InvalidReplyIDException.EXCEPTION_TEXT">
            <summary>
            InvalidReplyIDException text.
            </summary>
        </member>
        <member name="F:Framework.Util.InvalidReplyIDException.EXCEPTION_SEVERITY">
            <summary>
            InvalidReplyIDException severity.
            </summary>
        </member>
        <member name="M:Framework.Util.InvalidReplyIDException.#ctor">
            <summary>
            Default InvalidReplyIDException constructor.
            </summary>
        </member>
        <member name="T:Framework.Util.InvalidReplyTextException">
            <summary>
            InvalidReplyTextException class.
            </summary>
        </member>
        <member name="F:Framework.Util.InvalidReplyTextException.EXCEPTION_TEXT">
            <summary>
            InvalidReplyTextException text.
            </summary>
        </member>
        <member name="F:Framework.Util.InvalidReplyTextException.EXCEPTION_SEVERITY">
            <summary>
            InvalidReplyTextException severity.
            </summary>
        </member>
        <member name="M:Framework.Util.InvalidReplyTextException.#ctor">
            <summary>
            Default InvalidReplyTextException constructor.
            </summary>
        </member>
        <member name="T:Framework.Util.InvalidReplyTimestampException">
            <summary>
            InvalidReplyTimestampException class.
            </summary>
        </member>
        <member name="F:Framework.Util.InvalidReplyTimestampException.EXCEPTION_TEXT">
            <summary>
            InvalidReplyTimestampException text.
            </summary>
        </member>
        <member name="F:Framework.Util.InvalidReplyTimestampException.EXCEPTION_SEVERITY">
            <summary>
            InvalidReplyTimestampException severity.
            </summary>
        </member>
        <member name="M:Framework.Util.InvalidReplyTimestampException.#ctor">
            <summary>
            Default InvalidReplyTimestampException constructor.
            </summary>
        </member>
        <member name="T:Framework.Util.InvalidStateException">
            <summary>
            InvalidStateException class.
            </summary>
        </member>
        <member name="F:Framework.Util.InvalidStateException.EXCEPTION_TEXT">
            <summary>
            InvalidStateException text.
            </summary>
        </member>
        <member name="F:Framework.Util.InvalidStateException.EXCEPTION_SEVERITY">
            <summary>
            InvalidStateException severity.
            </summary>
        </member>
        <member name="M:Framework.Util.InvalidStateException.#ctor">
            <summary>
            Default InvalidStateException constructor.
            </summary>
        </member>
        <member name="T:Framework.Util.NodeListControlType">
            <summary>
            NodeListControlType enumeration.
            </summary>
        </member>
        <member name="F:Framework.Util.NodeListControlType.Basic">
            <summary>
            NodeList Control replies.
            </summary>
        </member>
        <member name="F:Framework.Util.NodeListControlType.Parents">
            <summary>
            NodeList Control parents.
            </summary>
        </member>
        <member name="F:Framework.Util.NodeListControlType.Children">
            <summary>
            NodeList Control children.
            </summary>
        </member>
        <member name="T:Framework.Util.Parsing.IConversationParser">
            <summary>
            
            </summary>
        </member>
        <member name="M:Framework.Util.Parsing.IConversationParser.ExpectedFormat(System.String)">
            <summary>
            
            </summary>
            <param name="parsedFile"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Util.Parsing.IConversationParser.ParseConversation(System.String,System.Collections.Generic.List{System.Guid})">
            <summary>
            
            </summary>
            <param name="parsedFile"></param>
            <param name="existingIDs"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Util.Parsing.ParsedReply">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Util.Parsing.ParsedReply._sealed">
            <summary>
            Flag whether data is sealed.
            </summary>
        </member>
        <member name="F:Framework.Util.Parsing.ParsedReply._author">
            <summary>
            Reply's author
            </summary>
        </member>
        <member name="F:Framework.Util.Parsing.ParsedReply._text">
            <summary>
            Reply's text
            </summary>
        </member>
        <member name="F:Framework.Util.Parsing.ParsedReply._id">
            <summary>
            Reply's ID
            </summary>
        </member>
        <member name="F:Framework.Util.Parsing.ParsedReply._parents">
            <summary>
            List of parents
            </summary>
        </member>
        <member name="F:Framework.Util.Parsing.ParsedReply._children">
            <summary>
            List of children
            </summary>
        </member>
        <member name="F:Framework.Util.Parsing.ParsedReply._timestamp">
            <summary>
            Reply's timestamp
            </summary>
        </member>
        <member name="M:Framework.Util.Parsing.ParsedReply.#ctor(System.String,System.String,System.DateTime,System.Guid)">
            <summary>
            Create new parsed reply
            </summary>
            <param name="author">Parsed reply's author</param>
            <param name="text">Parsed reply's text</param>
            <param name="timestamp">Parsed reply's timestamp</param>
            <param name="id">Parsed reply's id</param>
        </member>
        <member name="M:Framework.Util.Parsing.ParsedReply.SealData">
            <summary>
            Make sure that the data cannot be altered anymore
            </summary>
        </member>
        <member name="M:Framework.Util.Parsing.ParsedReply.AddChild(System.Guid)">
            <summary>
            Add child to reply
            </summary>
            <param name="id">Child's Id</param>
        </member>
        <member name="M:Framework.Util.Parsing.ParsedReply.AddParent(System.Guid)">
            <summary>
            /Add parent to reply
            </summary>
            <param name="id">Parent's Id</param>
        </member>
        <member name="M:Framework.Util.Parsing.ParsedReply.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Framework.Util.Parsing.ParsedReply.Author">
            <summary>
            Get Reply's Author
            </summary>
        </member>
        <member name="P:Framework.Util.Parsing.ParsedReply.Text">
            <summary>
            Get Reply's Text
            </summary>
        </member>
        <member name="P:Framework.Util.Parsing.ParsedReply.Id">
            <summary>
            Get Reply's Id
            </summary>
        </member>
        <member name="P:Framework.Util.Parsing.ParsedReply.Parents">
            <summary>
            Get Reply's list of parents
            </summary>
        </member>
        <member name="P:Framework.Util.Parsing.ParsedReply.Children">
            <summary>
            Get Reply's list of children
            </summary>
        </member>
        <member name="P:Framework.Util.Parsing.ParsedReply.Timestamp">
            <summary>
            Get Reply's timestamp
            </summary>
        </member>
        <member name="P:Framework.Util.Parsing.ParsedReply.Sealed">
            <summary>
            Check if data is sealed
            </summary>
        </member>
        <member name="T:Framework.Util.Parsing.ParserLoader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Framework.Util.Parsing.ParserLoader.LoadParser(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="libraryPath"></param>
            <param name="parserName"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Util.ReplyCircularDependencyException">
            <summary>
            ReplyCircularDependencyException class.
            </summary>
        </member>
        <member name="F:Framework.Util.ReplyCircularDependencyException.EXCEPTION_TEXT">
            <summary>
            ReplyCircularDependencyException text.
            </summary>
        </member>
        <member name="F:Framework.Util.ReplyCircularDependencyException.EXCEPTION_SEVERITY">
            <summary>
            ReplyCircularDependencyException severity.
            </summary>
        </member>
        <member name="M:Framework.Util.ReplyCircularDependencyException.#ctor">
            <summary>
            Default ReplyCircularDependencyException constructor.
            </summary>
        </member>
        <member name="T:Framework.Util.FrameworkExceptionClass">
            <summary>
            FrameworkExceptionClass class.
            </summary>
        </member>
        <member name="F:Framework.Util.FrameworkExceptionClass.EXCEPTION_TEXT">
            <summary>
            FrameworkExceptionClass text.
            </summary>
        </member>
        <member name="F:Framework.Util.FrameworkExceptionClass.EXCEPTION_SEVERITY">
            <summary>
            FrameworkExceptionClass severity.
            </summary>
        </member>
        <member name="M:Framework.Util.FrameworkExceptionClass.#ctor">
            <summary>
            Default FrameworkExceptionClass constructor.
            </summary>
        </member>
        <member name="T:Framework.Util.ReplyField">
            <summary>
            ReplyField enumeration.
            </summary>
        </member>
        <member name="F:Framework.Util.ReplyField.Timestamp">
            <summary>
            Reply's timestamp.
            </summary>
        </member>
        <member name="F:Framework.Util.ReplyField.Author">
            <summary>
            Reply's author.
            </summary>
        </member>
        <member name="F:Framework.Util.ReplyField.Text">
            <summary>
            Reply's text.
            </summary>
        </member>
        <member name="F:Framework.Util.ReplyField.Parent">
            <summary>
            Reply's parent.
            </summary>
        </member>
        <member name="F:Framework.Util.ReplyField.Child">
            <summary>
            Reply's child.
            </summary>
        </member>
        <member name="T:Framework.Util.SavedDataManagerState">
            <summary>
            SavedDataManagerState enumeration.
            </summary>
        </member>
        <member name="F:Framework.Util.SavedDataManagerState.CreateNewData">
            <summary>
            Create new database.
            </summary>
        </member>
        <member name="F:Framework.Util.SavedDataManagerState.OpenExistingData">
            <summary>
            Open existing database.
            </summary>
        </member>
        <member name="T:Framework.Util.ViewNodeMode">
            <summary>
            ViewNodeMode enumeration.
            </summary>
        </member>
        <member name="F:Framework.Util.ViewNodeMode.InCurrentWindow">
            <summary>
            View node in current window.
            </summary>
        </member>
        <member name="F:Framework.Util.ViewNodeMode.AsANewWindow">
            <summary>
            View node in a new window.
            </summary>
        </member>
    </members>
</doc>
